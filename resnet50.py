# -*- coding: utf-8 -*-
"""Resnet50.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wJ5fYIIxFvFRIZ3lnQzakUwiPmvjYteo
"""

import warnings
warnings.filterwarnings('ignore')
import keras
from keras.layers import Dense,Flatten,Dropout,BatchNormalization,UpSampling2D,MaxPooling2D
from keras.models import Sequential,Model
from keras.preprocessing.image import ImageDataGenerator
from keras.preprocessing.image import image
from glob import glob
from keras.applications.resnet50 import ResNet50
from keras.applications.resnet50 import preprocess_input
import numpy as np

image_size=[224,224]
category=glob('/content/drive/My Drive/train/*')
print(len(category))

resnet_model=ResNet50(input_shape=image_size+[3],weights='imagenet',include_top=False)
for layer in resnet_model.layers:
  layer.trainable=False

x=Flatten()(resnet_model.output)
prediction=Dense(len(category),activation='softmax')(x)
model=Model(inputs=resnet_model.input,outputs=prediction)

model.compile(loss=keras.metrics.categorical_crossentropy,optimizer='adam',metrics=['accuracy'])

train_set=ImageDataGenerator(rescale=1/255,preprocessing_function=preprocess_input,rotation_range=40,width_shift_range=0.2,height_shift_range=0.2,shear_range=0.2,zoom_range=0.2,horizontal_flip=True,vertical_flip=True,fill_mode='nearest')
test_set=ImageDataGenerator(rescale=1/255)
train=train_set.flow_from_directory('/content/drive/My Drive/train',target_size=(224,224),class_mode='categorical',batch_size=32)
test=test_set.flow_from_directory('/content/drive/My Drive/test',target_size=(224,224),class_mode='categorical',batch_size=32)

#from keras.callbacks import ModelCheckpoint
#checkpoint=ModelCheckpoint('ResNet_test_model.h5',verbose=1,save_best_only=True)
#callbacks=[checkpoint]

model.fit_generator(train,epochs=1,steps_per_epoch=200,validation_data=test,validation_steps=100)


test_image=image.load_img('/content/drive/My Drive/backpack.jpg',target_size=(224,224))
test_image=image.img_to_array(test_image)
test_image=np.expand_dims(test_image,axis=0)
result=model.predict(test_image)
if result[0][0] == 1:
    print('Backpack')
elif result[0][1]==1:
    print('Footwear')
elif result[0][2]==1:
    print('Glasses')
else:
    print('Watch')